# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
from buildbot.process import buildstep, logobserver
from twisted.internet import defer
from os.path import dirname, basename, isfile
import glob
import importlib
import sys
import __builtin__

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}
__builtin__.BuildmasterConfig = BuildmasterConfig

c['buildbotNetUsageData'] = None

# Collapse multiple build requests into one so we don't build every change.
@defer.inlineCallbacks
def collapseRequests(master, builder, req1, req2):
    # any requests with the same branch can be merged

    # get the buildsets for each buildrequest
    selfBuildset , otherBuildset = yield defer.gatherResults([
        master.data.get(('buildsets', req1['buildsetid'])),
        master.data.get(('buildsets', req2['buildsetid']))
        ])
    selfSourcestamps = selfBuildset['sourcestamps']
    otherSourcestamps = otherBuildset['sourcestamps']

    if len(selfSourcestamps) != len(otherSourcestamps):
        defer.returnValue(False)

    for selfSourcestamp, otherSourcestamp in zip(selfSourcestamps, otherSourcestamps):
        if selfSourcestamp['branch'] != otherSourcestamp['branch']:
            defer.returnValue(False)

    defer.returnValue(True)

c['collapseRequests'] = collapseRequests

# Configure workers
c['workers'] = [ worker.Worker('worker', 'pass', max_builds = 1) ]

# Protocols the master will use to talk to the workers
c['protocols'] = {'pb': {'port': 9989}}

# Keep history for the last 50 builds
c['changeHorizon'] = 50
c['buildHorizon'] = 50
c['logHorizon'] = 50

# Create empty lists for change source, schedulers, and builders.
# Projects will add themselves to these lists.
c['change_source'] = []
c['schedulers'] = []
c['builders'] = []

# We don't have any status targets.
c['status'] = []

# Misc configuration.
c['title'] = 'Buildbot'
c['titleURL'] = ''
c['buildbotURL'] = 'http://buildbot:8010/'

# To enable github authentication:
#   1. Uncomment the auth and authz settings below.
#   2. Replace CLIENT_ID and CLIENT_SECRET with your own client id and secret from
#      your github account.
#   3. Replace the list of usernames below with your own list and remove foo, bar, baz.
#   4. In the "web ui config" below, uncomment the auth and authz lines.

#auth = util.GitHubAuth(CLIENT_ID, CLIENT_SECRET)
#authz = util.Authz(
#    allowRules = [ util.AnyControlEndpointMatcher(role = "admins") ],
#    roleMatchers = [
#        util.RolesFromUsername(roles = [ 'admins' ],
#            usernames = [
#                'foo',
#                'bar',
#                'baz'
#            ])
#    ]
#)

# Web ui config.
c['www'] = {
    'port' : 8010,
    #'auth' : auth,
    #'authz' : authz,
    'custom_templates_dir' : '.'
}

# Database url.
c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : 'sqlite:///state.sqlite',
}

# Find all modules in the 'projects' subdirectory.
modules = glob.glob("projects/*.py")
projects = [ basename(f)[:-3] for f in modules if isfile(f) ]

# Append the "projects" subdirectory to the search path and load all modules in there.
sys.path.append("projects")
for project in projects:
    importlib.import_module(project)
